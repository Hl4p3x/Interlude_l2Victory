package ru.j2dev.gameserver.network.lineage2.components;

import java.util.Arrays;

/**
 * Created by JunkyFunky
 * on 16.01.2018 22:25
 * group j2dev
 */
public enum IncomingPackets {

    Action(0x04),
    AnswerJoinPartyRoom(0xD0, 0x15),
    AnswerTradeRequest(0x44),
    BypassUserCmd(0xAA),
    CanNotMoveAnymore(0x36),
    CanNotMoveAnymoreVehicle(0x5D),
    ChangeMoveType(0x1C),
    ChangeWaitType(0x1D),
    ConfirmDlg(0xC5),
    FinishRotating(0x4B),
    GMSnoopEnd(0xAB),
    GetOffVehicle(0x43),
    GetOnVehicle(0x42),
    MoveBackwardToLocation(0x01),
    MoveToLocationInVehicle(0x5C),
    MoveWithDelta(0x41),
    NetPing(0xA8),
    PetitionVote(0xC8),
    ReplyGameGuardQuery(0xCA),
    ReplyStartAllianceWar(0x99),
    ReplyStopAllianceWar(0x9B),
    RequestAcquireSkill(0x6C),
    RequestAcquireSkillInfo(0x6B),
    RequestActionUse(0x45),
    RequestAddTradeItem(0x16),
    RequestAllyCrest(0x88),
    RequestAllyInfo(0x8E),
    RequestAnswerJoinAlly(0x83),
    RequestAnswerJoinParty(0x2A),
    RequestAnswerJoinPledge(0x25),
    RequestAskJoinPartyRoom(0xD0, 0x14),
    RequestAttack(0x0A),
    RequestAutoSoulShot(0xD0, 0x05),
    RequestBBSWrite(0x22),
    RequestBlock(0xA0),
    RequestBuyItem(0x1F),
    RequestBuySeed(0xC4),
    RequestBypassToServer(0x21),
    RequestCastleSiegeAttackerList(0xA2),
    RequestCastleSiegeDefenderList(0xA3),
    RequestCastleSiegeInfo(0xA1),
    RequestChangePetName(0x89),
    RequestCharacterCreate(0x0B),
    RequestCharacterDelete(0x0C),
    RequestCharacterRestore(0x62),
    RequestConfirmCancelItem(0xD0, 0x2D),
    RequestConfirmCastleSiegeWaitingList(0xA5),
    RequestConfirmGemStone(0xD0, 0x2B),
    RequestConfirmRefinerItem(0xD0, 0x2A),
    RequestConfirmTargetItem(0xD0, 0x29),
    RequestCreatePledge(0x23),
    RequestCrystallizeItem(0x72),
    RequestCursedWeaponList(0xD0, 0x22),
    RequestCursedWeaponLocation(0xD0, 0x23),
    RequestDeleteMacro(0xC2),
    RequestDestroyItem(0x59),
    RequestDestroyQuest(0x64),
    RequestDismissAlly(0x86),
    RequestDismissParty(0x2D),
    RequestDismissPartyRoom(0xD0, 0x02),
    RequestDismissPledge(0x28),
    RequestDropItem(0x12),
    RequestDuelAnswerStart(0xD0, 0x28),
    RequestDuelStart(0xD0, 0x27),
    RequestDuelSurrender(0xD0, 0x30),
    RequestEnchantItem(0x58),
    RequestEnterWorld(0x03),
    RequestEquipItem(0x10),
    RequestExAcceptJoinMPCC(0xD0, 0x0E),
    RequestExAskJoinMPCC(0xD0, 0x0D),
    RequestExChangeName(0xD0, 0x31),
    RequestExEnchantSkill(0xD0, 0x07),
    RequestExEnchantSkillInfo(0xD0, 0x06),
    RequestExFishRanking(0xD0, 0x1F),
    RequestExMPCCShowPartyMembersInfo(0xD0, 0x26),
    RequestExMagicSkillUseGround(0xD0, 0x2F),
    RequestExOustFromMPCC(0xD0, 0x0F),
    RequestExPledgeCrestLarge(0xD0, 0x10),
    RequestExSetPledgeCrestLarge(0xD0, 0x11),
    RequestExitPartyMatchingWaitingRoom(0xD0, 0x17),
    RequestFriendAddReply(0x5F),
    RequestFriendDel(0x61),
    RequestFriendInfoList(0x60),
    RequestFriendInvite(0x5E),
    RequestGMCommand(0x6E),
    RequestGMList(0x81),
    RequestGameStart(0x0D),
    RequestGetBossRecord(0xD0, 0x18),
    RequestGetItemFromPet(0x8C),
    RequestGiveItemToPet(0x8B),
    RequestGiveNickName(0x55),
    RequestHandOverPartyMaster(0xD0, 0x04),
    RequestHennaEquip(0xBC),
    RequestHennaItemInfo(0xBB),
    RequestHennaItemList(0xBA),
    RequestHennaUnequip(0xBF),
    RequestHennaUnequipInfo(0xBE),
    RequestHennaUnequipList(0xBD),
    RequestItemList(0x0F),
    RequestJoinAlly(0x82),
    RequestJoinCastleSiege(0xA4),
    RequestJoinParty(0x29),
    RequestJoinPartyRoom(0x71),
    RequestJoinPledge(0x24),
    RequestLinkHtml(0x20),
    RequestListPartyMatchingWaitingRoom(0xD0, 0x16),
    RequestListPartyWaiting(0x6F),
    RequestLogin(0x08),
    RequestMagicList(0x3E),
    RequestMagicSkillUse(0x2F),
    RequestMakeMacro(0xC1),
    RequestManagePartyRoom(0x70),
    RequestManorList(0xD0, 0x08),
    RequestMultiSellChoose(0xA7),
    RequestNewCharacter(0x0E),
    RequestObserverEnd(0xB8),
    RequestOlympiadMatchList(0xD0, 0x13),
    RequestOlympiadObserverEnd(0xD0, 0x12),
    RequestOpenMinimap(0xCD),
    RequestOustAlly(0x85),
    RequestOustFromPartyRoom(0xD0, 0x01),
    RequestOustPartyMember(0x2C),
    RequestOustPledgeMember(0x27),
    RequestPCCafeCouponUse(0xD0, 0x20),
    RequestPackageSend(0x9F),
    RequestPackageSendableItemList(0x9E),
    RequestPetGetItem(0x8F),
    RequestPetUseItem(0x8A),
    RequestPetition(0x7F),
    RequestPetitionCancel(0x80),
    RequestPledgeCrest(0x68),
    RequestPledgeExtendedInfo(0x67),
    RequestPledgeInfo(0x66),
    RequestPledgeMemberInfo(0xD0, 0x1D),
    RequestPledgeMemberList(0x3C),
    RequestPledgeMemberPowerInfo(0xD0, 0x1B),
    RequestPledgePower(0xC0),
    RequestPledgePowerGradeList(0xD0, 0x1A),
    RequestPledgeReorganizeMember(0xD0, 0x24),
    RequestPledgeSetAcademyMaster(0xD0, 0x19),
    RequestPledgeSetMemberPowerGrade(0xD0, 0x1C),
    RequestPledgeWarList(0xD0, 0x1E),
    RequestPreviewItem(0xC6),
    RequestPrivateStoreBuyManageList(0x90),
    RequestPrivateStoreBuyManageQuit(0x93),
    RequestPrivateStoreSellManageCancel(0x75),
    RequestPrivateStoreSellManageList(0x73),
    RequestPrivateStoreSellQuit(0x76),
    RequestProcureCrop(0xC3),
    RequestProcureCropList(0xD0, 0x09),
    RequestQuestList(0x63),
    RequestRecipeBookOpen(0xAC),
    RequestRecipeItemDelete(0xAD),
    RequestRecipeItemMakeInfo(0xAE),
    RequestRecipeItemMakeSelf(0xAF),
    RequestRecipeShopListSet(0xB2),
    RequestRecipeShopMakeDo(0xB6),
    RequestRecipeShopMakeInfo(0xB5),
    RequestRecipeShopManageCancel(0xB4),
    RequestRecipeShopManageList(0xB0),
    RequestRecipeShopManageQuit(0xB3),
    RequestRecipeShopMessageSet(0xB1),
    RequestRecipeShopSellList(0xB7),
    RequestRefine(0xD0, 0x2C),
    RequestRefineCancel(0xD0, 0x2E),
    RequestReload(0xCF),
    RequestRemainTime(0xA9),
    RequestReplyStartPledgeWar(0x4E),
    RequestReplyStopPledgeWar(0x50),
    RequestReplySurrenderPledgeWar(0x52),
    RequestRestart(0x46),
    RequestRestartPoint(0x6D),
    RequestReviveReply(0x7A),
    RequestRide(0x6A),
    RequestSEKCustom(0x49),
    RequestSSQStatus(0xC7),
    RequestSellItem(0x1E),
    RequestSendL2FriendSay(0xCC),
    RequestSendMsnChatLog(0xCE),
    RequestSetAllyCrest(0x87),
    RequestSetCastleSiegeTime(0xA6),
    RequestSetCrop(0xD0, 0x0B),
    RequestSetPledgeCrest(0x53),
    RequestSetSeed(0xD0, 0x0A),
    RequestShortCutDel(0x35),
    RequestShortCutReg(0x33),
    RequestShortCutUse(0x34),
    RequestShowboard(0x57),
    RequestSiegeInfo(0x47),
    RequestSkillCoolTime(0x9D),
    RequestSkillList(0x3F),
    RequestStartAllianceWar(0x98),
    RequestStartPledgeWar(0x4D),
    RequestStopAllianceWar(0x9A),
    RequestStopPledgeWar(0x4F),
    RequestSurrenderAllianceWar(0x9C),
    RequestSurrenderPersonally(0x69),
    RequestSurrenderPledgeWar(0x51),
    RequestTargetCancel(0x37),
    RequestTeleport(0x1A),
    RequestTrade(0x15),
    RequestTutorialClientEvent(0x7E),
    RequestTutorialLinkHtml(0x7B),
    RequestTutorialPassCmdToServer(0x7C),
    RequestTutorialQuestionMarkPressed(0x7D),
    RequestUnEquipItem(0x11),
    RequestUseItem(0x14),
    RequestWithDrawalParty(0x2B),
    RequestWithDrawalPledge(0x26),
    RequestWithdrawAlly(0x84),
    RequestWithdrawPartyRoom(0xD0, 0x03),
    RequestWriteHeroWords(0xD0, 0x0C),
    Say(0x02),
    Say2(0x38),
    SendAppearing(0x30),
    SendBypassBuildCmd(0x5B),
    SendLogOut(0x09),
    SendPrivateStoreBuyList(0x79),
    SendPrivateStoreSellList(0x96),
    SendProtocolVersion(0x00),
    SendTimeCheck(0x97),
    SendWareHouseDepositList(0x31),
    SendWareHouseWithdrawList(0x32),
    SetPrivateStoreBuyList(0x91),
    SetPrivateStoreBuyMsg(0x94),
    SetPrivateStoreSellList(0x74),
    SetPrivateStoreSellMsg(0x77),
    SocialAction(0x1B),
    StartRotating(0x4A),
    TradeDone(0x17),
    UserAck(0x2E),
    ValidateLocation(0x48),
    VoteSociality(0xB9);


    private final int _id1;
    private final int _id2;

    IncomingPackets(int id1) {
        this(id1, -1);
    }

    IncomingPackets(int id1, int id2) {
        _id1 = id1;
        _id2 = id2;
    }

    public int getFirstId() {
        return _id1;
    }

    public int getSecondId() {
        return _id2;
    }

    public void logPacketNameAndOpcode(final int opcode1, final int opcode2) {
        Arrays.stream(values()).filter(incomingPackets -> incomingPackets.getFirstId() == opcode1).findFirst().get();
        Arrays.stream(values()).filter(incomingPackets -> incomingPackets.getSecondId() == opcode2).findFirst().get();
    }
}
